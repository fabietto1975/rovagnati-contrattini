<?php

namespace backend\app\rest\controllers;

use backend\common\rest\controllers\AbstractController;
use backend\app\service\RilevazioneService;

/**
 * @api {post} /rest/token (a) Richiesta token per autenticazione WS
 * @apiName Token
 * @apiGroup Token
 * 
 * @apiParam {String} username Username
 * @apiParam {String} password Password
 * 
 * @apiParamExample {json} Request-Example:
 *  {
 *      "username":"USERNAME",
 *      "password":"PASSWORD"	
 *  }
 *
 * @apiSuccess {String='success','fail'}                status                      Esito della richiesta .
 * @apiSuccess {String}                                 request_time                Timestamp relativo alla ricezione della richiesta.
 * @apiSuccess {String}                                 response_time               Timestamp relativo alla generazione della risposta.
 * 
 * @apiSuccessExample Success-Response:
 * 
 * {
 *   "request_time": "Tue May 10 11:25:31 CEST 2016",
 *   "code": 200,
 *   "response_time": "Tue May 10 11:25:31 CEST 2016",
 *   "status": "success",
 * } 
 * */
class RilevazioneController extends AbstractController {

    private $rilevazioneService;

    public function __construct($request) {
        parent::__construct($request);
        $this->rilevazioneService = new RilevazioneService();
    }

    public function getAction() {

        if (isset($this->request->url_elements [2])) {
            $action = $this->request->url_elements [2];
            if ($action == 'rilevazionecorrente') {
                $res = $this->rilevazioneService->readRilevazioneInCorso();
                if (isset($res['error'])) {
                    if (($res['error']=='DATA_ERROR')||($res['error']=='NO_DATA')){
                        $this->data['code'] = AbstractController::HTTP_CODE_INTERNAL_SERVER_ERROR;
                    } else {
                        $this->data['code'] = AbstractController::HTTP_CODE_NOTFOUND;
                    }
                    $this->getResultData($res, 'rilevazione', $res['message']);
                } else {
                    $this->getResultData($res, 'rilevazione', null);
                }
                return $this->data;
            } else {
                $id_punto_vendita = $action;
                if (isset($this->request->url_elements [3])) {
                    $id_rilevazione = $this->request->url_elements [3];
                    $res = $this->rilevazioneService->readRilevazione($id_rilevazione, $id_punto_vendita);
                    if (isset($res['error'])) {
                        $this->data['code'] = AbstractController::HTTP_CODE_NOTFOUND;
                        $this->getResultData($res, 'rilevazione', $res['message']);
                    } else {
                        $this->getResultData($res, 'rilevazione', null);
                    }
                    return $this->data;
                }
            }
        } else {
            $this->data['code'] = AbstractController::HTTP_CODE_BADREQUEST;
            return $this->data;
        }
    }

    public function postAction() {
        
    }

    public function deleteAction() {
        
    }

    public function putAction() {
        
    }

}
